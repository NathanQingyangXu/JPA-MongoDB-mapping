package org.hibernate.omm.jdbc.adapter;

import java.sql.*;
import org.hibernate.omm.jdbc.exception.NotSupportedSQLException;
import org.hibernate.omm.jdbc.exception.SimulatedSQLException;

public class StatementAdapter implements Statement {
  @Override
  public ResultSet executeQuery(String sql) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int executeUpdate(String sql) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void close() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int getMaxFieldSize() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void setMaxFieldSize(int max) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int getMaxRows() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void setMaxRows(int max) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int getQueryTimeout() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void setQueryTimeout(int seconds) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void cancel() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public SQLWarning getWarnings() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void clearWarnings() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void setCursorName(String name) throws SimulatedSQLException {}

  @Override
  public boolean execute(String sql) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public ResultSet getResultSet() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int getUpdateCount() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public boolean getMoreResults() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void setFetchDirection(int direction) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int getFetchDirection() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void setFetchSize(int rows) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int getFetchSize() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int getResultSetConcurrency() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int getResultSetType() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void addBatch(String sql) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void clearBatch() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int[] executeBatch() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public Connection getConnection() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public boolean getMoreResults(int current) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public ResultSet getGeneratedKeys() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public int getResultSetHoldability() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public boolean isClosed() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void setPoolable(boolean poolable) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public boolean isPoolable() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public void closeOnCompletion() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public boolean isCloseOnCompletion() throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SimulatedSQLException {
    throw new NotSupportedSQLException();
  }
}
